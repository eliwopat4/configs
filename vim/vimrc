

" This must be first, use Vim settings instead of Vi
set nocompatible  


" allow coc.nvim handle all language servers
let g:ale_disable_lsp = 1
" ================== vim-plug ==================
call plug#begin('~/.vim/plugged')
" Add cool colorschemes
Plug 'flazz/vim-colorschemes'
Plug 'mhartington/oceanic-next'

" syntax
Plug 'yuezk/vim-js'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'jparise/vim-graphql'

" lint/autocomplete/autoformat
Plug 'dense-analysis/ale'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" useful format/features
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf', { 'do': { -> fzf#install()  }  }
Plug 'junegunn/fzf.vim'"
Plug 'BurntSushi/ripgrep'

" git/file management
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter/'
Plug 'itchyny/lightline.vim'

" tmux integration
Plug 'christoomey/vim-tmux-navigator'
Plug 'edkolev/tmuxline.vim'
call plug#end()
" After adding new plugins run `:PlugInstall`

set tags=./tags;/


" ================== ale config ==================
let g:ale_fixers = {
      \   'javascript': ['prettier', 'eslint'],
      \   'css': ['prettier'],
      \   'html': ['prettier']
      \}
let g:ale_linters_explicit = 1
let g:ale_fix_on_save = 1
let g:ale_javascript_prettier_options = '--trailing-comma all'
nmap <silent> <C-e> <Plug>(ale_next_wrap)
let g:ale_sign_error = '‚óè'
let g:ale_sign_warning = '.'


" ================== coc.nvim config ==================
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif
" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif
command! -nargs=0 Prettier :CocCommand prettier.formatFile


" ================== lightline theme ================== 
let g:lightline = {
      \ 'colorscheme': 'seoul256',
      \ 'active': {
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat' ] ],
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ 'component': {
      \   'filename': '%f',
      \ }
      \ }

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0

" ================== vim theme ================== 
if !has('gui_running')
  set t_Co=256
endif
if (has("termguicolors"))
  set termguicolors
endif
set background=dark
colorscheme OceanicNext
syntax on


" ================== vim settings ==================
filetype plugin indent on
"set shell=/bin/zsh
"set guifont=Menlo:h14
set modelines=0
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set encoding=utf-8
set scrolloff=3
set autoindent
set noshowmode 
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set number
set noundofile
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set wrap
set linebreak
set nolist
set formatoptions=qrn1
set nobackup
set nowritebackup
set noswapfile
set history=100
set updatetime=300
set shortmess+=c
set textwidth=70
" auto-formate pasted data
noremap p p=`]<C-o>
nnoremap P P=`]<C-o>


" ================== custom mappings ==================
inoremap jk <ESC>
inoremap JK <ESC>
let mapleader = " "
nnoremap <leader>nn :NERDTreeToggle<CR>
" add new line above and below current line
nnoremap <silent><leader>j :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <silent><leader>k :set paste<CR>m`O<Esc>``:set nopaste<CR>
" switch buffers
nnoremap <silent><leader>.. :bn<CR> 
nnoremap <silent><leader>,, :bp<CR> 
nnoremap <silent><leader>bb :ls<CR>:b<Space>
vnoremap <silent><leader>c :w !pbcopy<CR>


" ================== custom mappings for fzf adn ripgrep ==================
nnoremap <silent> <leader>f :Files<CR>
nnoremap <silent> <leader>r :Rg<CR>


" ================== autopair mapping ==================
let g:AutoPairsShortcutToggle = '<C-p>'
"let g:AutoPairsShortcutFastWrap = '<C-f>'
let g:AutoPairsShortcutJump = '<C-n>'
let g:AutoPairsShortcutBackInsert = '<C-b>'


" ================== close nerdtree ==================
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


" ================== arrows are unvimlike ==================
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>





